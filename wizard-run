#!/bin/bash
#
# EdgeMAX Wizard "ER-wizard-0xFF-OpenVPN2TS" created 03/2018 by CPO/BMK for FunkFeuer.at
# Version 20180216
# ^-- previous line is used from bmk-webstatus-package as version identification, dont remove "Version "
# Shortform: 0xFF-OpenVPN2TS
#
# Github repository: https://github.com/pocki80/ER-wizard-0xFF-OpenVPN2TS
#
# Works on all EdgeRouter and EdgePoint Devices (system version 1.9.7+)
#

ACTION=$1
INPUT=$2

cfgusrdir="/config/user-data/"
log="/var/log/0xffopenvpn.log"

tunnelserverip="78.41.115.16"
tunneldevice="vtun0"
openvpnconfig="/config/user-data/funkfeuer.ovpn"
openvpnsecret="/config/user-data/funkfeuer.secret"
openvpnifupdown="/config/user-data/funkfeuer-ifupdown.sh"


#define update sources on github
gitowner="pocki80"
gitrepo="ER-wizard-0xFF-OpenVPN2TS"
gitbranch="master"

# hosts to check for online status
v4iphost='8.8.8.8'
v4dnshost='www.google.com'
v6iphost='2001:4860:4860::8888'
v6dnshost='www.google.com'


#
# DO NOT EDIT BELOW HERE !
#

##checks
#numbers only
re='^[0-9]+$'


echo "EdgeMAX ER-wizard-0xFF-OpenVPN2TS Wizard started $(date +%Y-%m-%d/%H:%M:%S.%N) Session="$$ >>$log

#base64begin 
# !dont edit or remove this comment!
echo "Installation procedure..." >>$log

if [ ! -f $openvpnconfig ]; then
  echo "Create file $openvpnconfig..." >>$log
  cat    >$openvpnconfig 2>>$log <<ENDSCRIPTINSTALL
dev             $tunneldevice
dev-type        tap
proto           udp
remote          $tunnelserverip
port            5999
#daemon          $tunneldevice
up-delay
down-pre
up-restart
comp-lzo
script-security 2
nobind
ping 10
ping-restart 60
ping-timer-rem
fast-io
sndbuf  524288 
rcvbuf  524288
mute 2
verb 1
#up "$openvpnifupdown"
#down "$openvpnifupdown"
#secret $openvpnsecret
#auth SHA256
#cipher none
ENDSCRIPTINSTALL
fi
  
if [ ! -f $openvpnifupdown ]; then
  echo "Create file $openvpnifupdown..." >>$log
  cat    >$openvpnifupdown 2>>$log <<'ENDSCRIPTINSTALL'
#!/bin/sh
logger "$dev $script_type"
case "$1" in
       silent)
               br="br9"
       ;;
       ether)
               br="br8"
       ;;
       *)
               br="br7"
esac
case "$script_type" in
       up)
               /sbin/brctl addif $br $dev
               /sbin/ip link set $br promisc on
               /sbin/ip link set $dev up
       ;;
       down)
               /sbin/ip link set $dev down 
               /sbin/ip link set $br promisc off
               /sbin/brctl delif $br $dev

       ;;
       *)
esac
exit 0
ENDSCRIPTINSTALL
  chmod 755 $openvpnifupdown >>$log 2>>$log
fi

#check if there's at least one bridge between br2 andf br9, create br9 if not any
if [ $(ls /opt/vyatta/config/active/interfaces/bridge | grep -vwE "br0|br1" | grep -cE "br.") -eq 0 ]; then
    echo "create br9 on install" >>$log
    commandlist[${#commandlist[@]}]="set interfaces bridge br9"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 aging 300"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 bridged-conntrack disable"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 description TUNNEL"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 hello-time 2"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 max-age 20"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 priority 32768"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 stp false"
    cmd="/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper"
    tfile=$(mktemp)
(
$cmd begin
ret=0
for executecmd in "${commandlist[@]}"; do
    if [ $ret == 0 ]; then
        echo "--"$executecmd >>$log
        $cmd $executecmd || ret=1
    else
        echo "--skipped: "$executecmd >>$log
    fi
done
[ $ret == 0 ] && $cmd commit || ret=1
[ $ret == 0 ] && $cmd save || ret=1
$cmd end
exit $ret
) >$tfile 2>&1
    ret=$?
    output=$(cat $tfile)
    rm -f $tfile
    echo "${output}" >> $log
    commandlist=[]
fi


# remove installtion block
sed -i '/^#base64begin/,/^#base64end$/d' $0
# !dont edit or remove this comment!
#base64end

# function to check if connectivity is given to download packages
onlinecheck () {
    ping="ping -c 1 -W 1 ";
    ping6="ping6 -c 1 -W 1 ";
    $ping $v4iphost >/dev/null 2>/dev/null
    if [[ $? == 0 ]]; then
        # ipv4 ok
        $ping6 $v6iphost >/dev/null 2>/dev/null
        if [[ $? == 0 ]]; then
            # ipv6 ok
            $ping6 $v6dnshost >/dev/null 2>/dev/null
            if [[ $? == 0 ]]; then
                # ipv6dns ok
                return 0
            else
                # ipv6dns not ok
                return 1
            fi
        else
            # ipv6 not ok, fallback to ipv4
            # issue: dns resolver prefers v6 (if ipv6 is configured)
            $ping $v4dnshost >/dev/null 2>/dev/null
            if [[ $? == 0 ]]; then
                # ipv4dns ok
                return 0
            else
                # ipv4dns not ok
                return 1
            fi
        fi
    else
        # ipv4 not ok
        return 1
    fi
}

# function called when you click the wizard
load () {
    echo "Load procedure..." >>$log

    if [ ! -f $openvpnconfig ]; then
        packagestatus='err: missing config file - reinstall this wizard!'
    else
        packagestatus='ok'
    fi

    ####### wizard version check against github
    # 
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html); do
        if [[ $(head $i -n 10 | grep 'ER-wizard-0xFF-OpenVPN2TS') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [ ! $olsrdwizard ]; then
        updatetext="error: ER-wizard-0xFF-OpenVPN2TS wizard.html not found!" >>$log 2>>$log
    else
        CURRENTVERSION=$(head -n 8 $olsrdwizard | grep -i versioninfo= | awk -F"=" {'print $2'})
        if [ $((onlinecheck)) = 0 ]; then
            GITVERSION=$(curl -s --connect-timeout 2 --speed-time 2 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -i versioninfo= | awk -F"=" {'print $2'})
            if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
                if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
                    updatetext="new version available: "$GITVERSION", current: "$CURRENTVERSION >>$log 2>>$log
                else
                    updatetext="current version "$CURRENTVERSION" is up-to-date" >>$log 2>>$log
                fi
            else
                updatetext="version info not available. git:"$GITVERSION", current: "$CURRENTVERSION"." >>$log 2>>$log
            fi
        else
            updatetext="version info not available. git:OFFLINE, current: "$CURRENTVERSION"." >>$log 2>>$log
        fi
    fi
    updatestatus=',"updatestatus":"'$updatetext'"'
    # end
    ####### wizard version check against github

    if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "wizard-openvpn2ts=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
        autoupdatefromgithub=',"autoupdatefromgithub":"on"'
    fi
    
    #get dev from config file
    tunneldevice=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^dev," | cut -d, -f2)
    if [[ "$tunneldevice" =~ vtun[0-9]{1,2} ]]; then
        #check for running openvpn using this vtun device
        currentvtunprocess=$(ps aux | grep -v grep | grep -E "/usr/sbin/openvpn .* /var/run/openvpn-$tunneldevice.pid .*" | awk '{print $2}')
        if [ "$currentvtunprocess" ]; then
            #find config file of this process
            currentvtunconfig=$(ps $currentvtunprocess | tail -1 | grep -oE "\-\-config [A-Za-z0-9~!#$%^&*()_+-/]* " | awk '{print $2}')
            #verify that this is our config file
            [ "$currentvtunconfig" == "$openvpnconfig" ] || packagestatus='err: openvpn@'$tunneldevice' using '$currentvtunconfig
        else
            currentvtunconfig=$openvpnconfig
            packagestatus='ok: openvpn for '$tunneldevice' not running'
        fi
    else
        packagestatus='err: wrong or missing dev parameter "'$tunneldevice'"'
    fi
    lastlogline=$(grep " openvpn\[" /var/log/messages | tail -1 | sed -e "s/$(hostname) openvpn\[.*\]: //")
    
    #get assigned bridge of vtun device
    bridge=$(cat /opt/vyatta/config/active/interfaces/openvpn/$tunneldevice/bridge-group/bridge/node.val 2>/dev/null)
    [ "$bridge" ] &&
      ipv4addr=$(ip -f inet addr | awk '/^[0-9]:*|inet/ { print $2 }' | sed ':a;N;$!ba;s/:\n/;/g' | grep -E "^$bridge" | cut -d";" -f2) ||
      packagestatus='err: '$tunneldevice' is not assigned to any bridge'
    
    #get local bridges
    brinterfaces=$(ls /opt/vyatta/config/active/interfaces/bridge)
    brlist='"bridge":{"options":["'$(echo $brinterfaces | sed 's/ /","/g')'"],"other":"false"}'
    [ "$brinterfaces" ] || packagestatus='err: no bridge interfaces found'

    #get portnumber from config file
    portnumber=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^port," | cut -d, -f2)

    #get tunnel and bridge up/down state
    tunnelupdown=$(ip -4 link | grep $tunneldevice":" | grep -oE "state UP |state DOWN " | cut -d" " -f2)
    bridgeupdown=$(ip -4 link | grep $bridge":" | grep -oE "state UP |state DOWN " | cut -d" " -f2)
    [ "$tunnelupdown" == "UP" ] && [ "$bridgeupdown" == "UP" ] && established="on"

    destination=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^remote," | cut -d, -f2)
    todestination=$(ip -4 r get $destination 2>/dev/null | head -1 | awk '{print $5","$3","$7}')
    int2dest=$(echo $todestination | cut -d"," -f1)
    gw2dest=$(echo $todestination | cut -d"," -f2)
    src2dest=$(echo $todestination | cut -d"," -f3)
    
    #ping-to-destination?
    ping="ping -c 1 -W 1 ";
    $ping $destination >/dev/null 2>/dev/null
    [[ $? == 0 ]] && destistate="ok" || destistate="err"
    
    #ping to web
    onlinecheck
    [[ $? == 0 ]] && onlinestate="ok" || onlinestate="err"

    #check for .secret
    secretfile=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^secret," | cut -d, -f2)
    [ "$secretfile" ] && [ -f $secretfile ] && [ $(stat -c %s $secretfile) -ge 300 ] && secreton="on"
    
    [ -f $openvpnsecret ] && secretfound="on"

    #possible gateway interfaces
    webinterfaces=$(ip -4 r | grep -oE "dev .{3,7} " | awk '!x[$2]++ {print $2}' | sort)
    gwlist='"int2dest":{"options":["'$(echo $webinterfaces | sed 's/ /","/g')'"],"other":"false"}'


    #static-route?
    staticto=$(find /opt/vyatta/config/active/protocols/static/route/*/next-hop/$gw2dest -maxdepth 0 | awk -F"/" '{gsub("%2F","/",$9); print $9}')
    [ "$staticto" ] && staticon="on"
    
    #extract openvpn-settings
    #sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot
    [ $(sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot | grep -cE "^        disable$") -eq 1 ] && disabled="on"
    [ $(sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot | grep -c "config-file $openvpnconfig") -eq 1 ] && configured="on"
    [ "$configured" ] && [ ! "$disabled" ] && tunnelenabled="on"

    # get all variables together for output
    packagestatus='"packagestatus":"'$packagestatus'"'
    echo -n "{\"success\":\"1\",\"data\":{ $packagestatus $autoupdatefromgithub $updatestatus"
    echo -n ",\"tunnelenabled\":\"$tunnelenabled\",\"established\":\"$established\",\"ipv4addr\":\"$ipv4addr\",\"bridge\":\"$bridge\""
    echo -n ",\"portnumber\":\"$portnumber\""
    echo -n ",\"lastlogline\":\"$lastlogline\""
    echo -n ",\"tunneldevice\":\"$tunneldevice\""
    echo -n ",\"destination\":\"$destination\""
    echo -n ",\"int2dest\":\"$int2dest\""
    echo -n ",\"gw2dest\":\"$gw2dest\""
    echo -n ",\"src2dest\":\"$src2dest\""
    echo -n ",\"destistate\":\"$destistate\""
    echo -n ",\"onlinestate\":\"$onlinestate\""
    echo -n ",\"staticto\":\"$staticto\""
    echo -n ",\"staticon\":\"$staticon\""
    echo -n ",\"secreton\":\"$secreton\""
    echo -n ",\"secretfound\":\"$secretfound\""
    echo -n ",\"currentvtunconfig\":\"$currentvtunconfig\""
    echo -n " },"
    echo    " \"definition\":{$brlist,$gwlist}}"
}

# function called when you click apply
apply () {
    ret=0
    echo "Apply procedure..." >>$log
    updatefromgithub=$(jq -M -r '.updatefromgithub' $INPUT)
    if [[ "$updatefromgithub" == "on" ]]; then
        echo "update from github requested" >>$log 2>>$log
        olsrdwizard=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep 'ER-wizard-0xFF-OpenVPN2TS') ]]; then
                olsrdwizard=$i
                break
            fi
        done
        if [ ! $olsrdwizard ]; then
            echo "error: ER-wizard-0xFF-OpenVPN2TS wizard.html not found!" >>$log 2>>$log
        elif [ $((onlinecheck)) != 0 ]; then
            echo "currently offline" >>$log 2>>$log
        else
            curl -s -o /tmp/ER-wizard.tar.gz --connect-timeout 2 --speed-time 2 https://codeload.github.com/$gitowner/$gitrepo/legacy.tar.gz/master >>$log 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
              set $LINE
              if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
              [ -f "/tmp/"$LINE ] && [ $W == "1" ] && cp "/tmp/"$LINE $(dirname $olsrdwizard)"/"$(basename $LINE) >>$log 2>>$log
            done < /tmp/result.txt
            rm /tmp/result.txt >>$log 2>>$log
            rm -Rf /tmp/$gitowner-$gitrepo* >>$log 2>>$log
            chmod 755 $(dirname $olsrdwizard)"/"wizard-run >>$log 2>>$log
            $(dirname $olsrdwizard)"/"wizard-run load >>$log 2>>$log
        fi
    fi
    autoupdatefromgithub=$(jq -M -r '.autoupdatefromgithub' $INPUT)
    if [[ "$autoupdatefromgithub" == "on" ]]; then
        #check for auto-update wizard, install if not there!!
        wiz=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep "ER-wizard-AutoUpdate") ]]; then
                wiz=$i
                break
            fi
        done
        if [ ! $wiz ]; then 
            #autoupdate-wizard mit scripten fehlt: offline-install
            wiz="/config/wizard/feature/AutoUpdate/wizard.html"
            echo "Installing "$(dirname $wiz)"..." >>$log 2>>$log
            if [ ! -d $(dirname $wiz) ]; then 
                mkdir $(dirname $wiz) >>$log 2>>$log
                chmod --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
                chown --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
            fi
            #extract offline --> replaces download-procedure, Version 20171122, https://github.com/pocki80/ER-wizard-AutoUpdate
            echo "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
jxxllu+yl3fX3XV3/ZuvPwAoGfqJAHAAAA==
" | base64 -d >/tmp/ER-wizard.tar.gz 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
                set $LINE
                if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
                if [ -f "/tmp/"$LINE ] && [ $W == "1" ]; then
                    sudo cp "/tmp/"$LINE $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chmod --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chown --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                fi
            done < /tmp/result.txt
            rm /tmp/result.txt
            rm -Rf /tmp/$git2owner-$git2repo* >>$log 2>>$log
            chmod 755 $(dirname $wiz)"/"wizard-run >>$log 2>>$log
            echo "Installing done, now triggering initial load..." >>$log 2>>$log
            $(dirname $wiz)"/"wizard-run load  >>$log 2>>$log
        fi
        #remove "no" if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-openvpn2ts=no" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-openvpn2ts=no" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
        if [ ! -f /config/user-data/autoupdate.dat ]; then
            #create settings file if missing
            echo 'wizard-openvpn2ts=yes' >/config/user-data/autoupdate.dat 2>>$log
            echo '' >>/config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        else
            #add yes line if missing
            if [ "$(grep -i "wizard-openvpn2ts=yes" /config/user-data/autoupdate.dat |wc -l)" == "0" ]; then
                echo 'wizard-openvpn2ts=yes' >>/config/user-data/autoupdate.dat 2>>$log
                echo '' >>/config/user-data/autoupdate.dat 2>>$log
                sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            fi
        fi
    else
        #remove yes line if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-openvpn2ts=yes" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-openvpn2ts=yes" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            curl -so /dev/null --connect-timeout 2 --speed-time 2 "https://ff.cybercomm.at/aulog/logthis.php?w=off-openvpn2ts&r=$(hostname)" >/dev/null 2>/dev/null
        fi
    fi
    # end
    ####### wizard manual update from github

    #reset daemon on user request
    resetopenvpnnow=$(jq -M -r '.resetopenvpnnow' $INPUT)
    if [ "$resetopenvpnnow" == "on" ]; then
        resetdaemon=1
    fi

    #check for .secret
    secretfile=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^secret," | cut -d, -f2)
    [ "$secretfile" ] && [ -f $secretfile ] && [ $(stat -c %s $secretfile) -ge 300 ] && secreton="on"
    secretonnew=$(jq -M -r '.secreton' $INPUT)
    
    #IMPROVE this regarding filename handling of secret-file
    if [ ! "$secreton" ] && [ "$secretonnew" == "on" ] && [ -f $openvpnsecret ] && [ $(stat -c %s $openvpnsecret) -ge 300 ]; then
        echo "Setting up secret file in ovpn config" >>$log
        #be careful with secret param
        sed -i "/^.*#.*secret /"'s/^.*#.*secret.*$/secret \/config\/user-data\/funkfeuer\.secret/' $openvpnconfig
        (grep -q "secret /config/user-data/funkfeuer.secret" $openvpnconfig) || echo "secret /config/user-data/funkfeuer.secret" >>$openvpnconfig
        #now auth and cipher
        sed -i "/^.*auth /"'s/^.*auth.*$/auth SHA256/' $openvpnconfig
        (grep -q "auth SHA256" $openvpnconfig) || echo "auth SHA256" >>$openvpnconfig
        sed -i "/^.*cipher /"'s/^.*cipher.*$/cipher none/' $openvpnconfig
        (grep -q "cipher none" $openvpnconfig) || echo "cipher none" >>$openvpnconfig
        resetdaemon=4
    elif [ "$secreton" ] && [ ! "$secretonnew" ]; then
        echo "Disable secret file in ovpn config" >>$log
        sed -i "/^secret /"'s/^/#/' $openvpnconfig
        sed -i "/^auth /"'s/^/#/' $openvpnconfig
        sed -i "/^cipher /"'s/^/#/' $openvpnconfig
        resetdaemon=5
    fi

    #get tunneldevice from config file
    tunneldevice=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^dev," | cut -d, -f2)
    
    ##only if not updating right now
    if [[ "$updatefromgithub" == "on" ]]; then
        resetdaemon=""
    else
        #be sure there is a config file before doing anything
        if [ ! -f $openvpnconfig ]; then
            ret=1
            output='missing config file - reinstall this wizard to fix it!'
        else
            #be sure the config file from a running process is matching the tunneldevice running it
            if [[ "$tunneldevice" =~ vtun[0-9]{1,2} ]]; then
                currentvtunprocess=$(ps aux | grep -v grep | grep -E "/usr/sbin/openvpn .* /var/run/openvpn-$tunneldevice.pid .*" | awk '{print $2}')
                if [ "$currentvtunprocess" ]; then
                    currentvtunconfig=$(ps $currentvtunprocess | tail -1 | grep -oE "\-\-config [A-Za-z0-9~!#$%^&*()_+-/]* " | awk '{print $2}')
                else
                    currentvtunconfig=$openvpnconfig
                fi
                if [ "$currentvtunconfig" == "$openvpnconfig" ]; then
                    runningok=1
                else
                    ret=1
                    output='openvpn@'$tunneldevice' using '$currentvtunconfig' - fix this manually before using this wizard!'
                fi
            else
                ret=1
                output='err: wrong or missing dev parameter in config file '$tunneldevice
            fi
        fi
    fi
    # end "if not updating"

    #get bridges
    bridge=$(cat /opt/vyatta/config/active/interfaces/openvpn/$tunneldevice/bridge-group/bridge/node.val 2>/dev/null)
    bridgenew=$(jq -M -r '.bridge' $INPUT)

    #prepare work for static route
    destination=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^remote," | cut -d, -f2)
    todestination=$(ip -4 r get $destination 2>/dev/null | head -1 | awk '{print $5","$3","$7}')
    int2dest=$(echo $todestination | cut -d"," -f1)
    gw2dest=$(echo $todestination | cut -d"," -f2)
    int2destnew=$(jq -M -r '.int2dest' $INPUT)
    
    #avoid gateway to be the opebvpn bridge
    [ "$int2destnew" ] && [ "$bridgenew" ] && [ "$int2destnew" == "$bridgenew" ] && int2destnew=$int2dest
    
    if [ "$int2dest" ] && [ "$int2destnew" ] && [ ! "$int2dest" == "$int2destnew" ]; then
        #user wants to change default interface for vpn-destination
        gw2destnew=$(ip -4 r | grep "dev $int2destnew " | grep "default via " | awk '{print $3}')
        staticsaved=$(find /opt/vyatta/config/active/protocols/static/route/$destination%2F32/next-hop/$gw2dest -maxdepth 0 | awk -F"/" '{print $11}')
        if [ "$staticsaved" ] && [ "$destination" ]; then
            echo "Removing statuc route $destination/32 via gw=$staticsaved" >>$log
            commandlist[${#commandlist[@]}]="delete protocols static route $destination/32"
        fi
        if [ "$gw2destnew" ] && [ "$destination" ]; then
            echo "Adding static route $destination/32 via new gw=$gw2destnew" >>$log
            commandlist[${#commandlist[@]}]="set protocols static route $destination/32 next-hop $gw2destnew description TunnelserverVPN"
        fi
    fi
    

    #get portnumber from config file
    portnumber=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^port," | cut -d, -f2)
    #get port number from user
    portnumbernew=$(jq -M -r '.portnumber' $INPUT)
    if [ "$portnumber" ] && [ "$portnumbernew" ] &&
       [[ $portnumber =~ $re ]] && [[ $portnumbernew =~ $re ]] && 
       [ $portnumbernew -ge 5000 ] && [ $portnumbernew -le 5999 ]; then
        if [ ! "$portnumber" == "$portnumbernew" ]; then
            #number is ok, change it
            echo "Changing Portnumber from $portnumber to $portnumbernew" >>$log
            linenumber=$(grep -niE "port.*$portnumber" $openvpnconfig | grep -viE ".*#.*port" | awk -F: {'print $1'})
            sed -i "$linenumber""s/$portnumber/$portnumbernew/" $openvpnconfig 2>/dev/null
            resetdaemon=2
        fi
    else
        ret=1
        output='portnumber error'
    fi
    
    #extract openvpn-settings
    #sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot
    
    #check bridge settings ## go for "old" tunneldevice!
    #get enabled state 
    tunnelenabled=$(jq -M -r '.tunnelenabled' $INPUT)
    tunneldevicenew=$(jq -M -r '.tunneldevice' $INPUT)
    if [ ! "$tunneldevicenew" ] || [[ ! "$tunneldevicenew" =~ vtun[0-9]{1,2} ]]; then
        ret=1
        output="error on tunneldevice - must be between vtun0..vtun99"
        tunneldevicenew="$tunneldevice"
    fi
    [ "$tunneldevicenew" ] && [ ! "$tunneldevice" == "$tunneldevicenew" ] && devchanged=1
    
    [ $(sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot | grep -cE "^        disable$") -eq 1 ] && disabled="on"
    [ $(sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot | grep -c "config-file $openvpnconfig") -eq 1 ] && configured="on"
    
    if [ "$devchanged" ]; then
        #put new dev to config file!
        echo "Changing Tunneldevice from $tunneldevice to $tunneldevicenew" >>$log
        linenumber=$(grep -niE "dev.*$tunneldevice" $openvpnconfig | grep -viE ".*#.*dev" | awk -F: {'print $1'})
        sed -i "$linenumber""s/$tunneldevice/$tunneldevicenew/" $openvpnconfig 2>/dev/null
        if [ "$configured" ]; then
            # remove settings from old tunneldevice at first place
            configured=""
            disabled=""
            bridge=""
            resetdaemon=""
            commandlist[${#commandlist[@]}]="delete interfaces openvpn $tunneldevice"
            commandlist[${#commandlist[@]}]="commit"
        fi
    fi
    
    if [ "$tunnelenabled" == "on" ]; then
        if [ "$configured" ]; then
            [ "$disabled" ] && commandlist[${#commandlist[@]}]="delete interfaces openvpn $tunneldevice disable"
        else 
            commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew config-file $openvpnconfig"
            commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew description Tunnelserver"
        fi
    elif [ "$configured" ]; then
        [ "$disabled" ] || commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew disable"
        disabled="on"
        resetdaemon=""
    else
        commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew config-file $openvpnconfig"
        commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew description Tunnelserver"
        commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew disable"
    fi

    #now care about correct bridge
    if [ "$bridge" == "$bridgenew" ]; then
        [ "$devchanged" ] && [ "$bridgenew" ] && commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew bridge-group bridge $bridgenew"
    elif [ "$bridgenew" ]; then
        commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew bridge-group bridge $bridgenew"
    fi

    if [ ${#commandlist[@]} \> 0 ] && [ $ret == 0 ]; then
        echo "Applying script commands..." >>$log
        cmd="/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper"
tfile=$(mktemp)
(
$cmd begin
ret=0
for executecmd in "${commandlist[@]}"; do
    if [ $ret == 0 ]; then
        echo "--"$executecmd >>$log
        $cmd $executecmd || ret=1
    else
        echo "--skipped: "$executecmd >>$log
    fi
done
[ $ret == 0 ] && $cmd commit || ret=1
[ $ret == 0 ] && $cmd save || ret=1
$cmd end
exit $ret
) >$tfile 2>&1
ret=$?
output=$(cat $tfile)
rm -f $tfile
echo "${output}" >> $log
    #exiting configuration all must be fine
    fi

    #reset daemon if requested from user or needed due to changes config file
    if [ "$resetdaemon" ] && [ "$runningok" ] && [ "$currentvtunprocess" ]; then
        startcommand=$(ps u --pid $currentvtunprocess | tail -1 | sed -e "s/^.*\/usr\/sbin\/openvpn /\/usr\/sbin\/openvpn /")
        if [ "$startcommand" ]; then
            echo "Resetting openvpn $tunneldevice pid $currentvtunprocess ($resetdaemon)..."  >>$log
            sudo kill $currentvtunprocess >>$log 2>>$log
            sudo rm -f /var/run/openvpn-vtun0.pid >>$log 2>>$log
            sudo $startcommand
        else
            echo "Resetting openvpn failed - process not found"  >>$log
        fi
    fi

    # for debugging purposes
    cp $INPUT /tmp/result.json

    # $ret and $output comes from port change
    if [ "$ret" == "1" ]; then
        echo "ERROR from Wizard to UI: "$output  >>$log
        echo "{\"success\":\"0\",\"error\": \"${output//\"/\'}\"}"
    else
        echo "{\"success\":\"1\"}"
    fi
}

#ubnt@wehrtest-router:/var/log$ sudo cat /tmp/result.json
#{
#    "tunnelenabled": "on",
#    "bridge": "br9",
#    "portnumber": "5101",
#    "tunneldevice": "vtun0",
#    "secretstring": "",
#    "int2dest": "eth0.1"
#}
#ubnt@wehrtest-router:/var/log$ sudo cat /tmp/result.json
#{
#    "enabled": "on",
#    "bridge": "",
#    "portnumber": "5101"
#}

case "$ACTION" in
    load)
        load
        ;;
    apply)
        apply
        ;;
esac

echo "EdgeMAX ER-wizard-0xFF-OpenVPN2TS ended $(date +%Y-%m-%d/%H:%M:%S.%N) Session="$$ >>$log
